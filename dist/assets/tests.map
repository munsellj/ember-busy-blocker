{"version":3,"sources":["dummy/tests/acceptance/busy-test.js","dummy/tests/acceptance/busy-test.lint-test.js","dummy/tests/app.lint-test.js","dummy/tests/controllers/index.lint-test.js","dummy/tests/helpers/destroy-app.js","dummy/tests/helpers/destroy-app.lint-test.js","dummy/tests/helpers/module-for-acceptance.js","dummy/tests/helpers/module-for-acceptance.lint-test.js","dummy/tests/helpers/resolver.js","dummy/tests/helpers/resolver.lint-test.js","dummy/tests/helpers/start-app.js","dummy/tests/helpers/start-app.lint-test.js","dummy/tests/resolver.lint-test.js","dummy/tests/router.lint-test.js","dummy/tests/routes/application.lint-test.js","dummy/tests/routes/index.lint-test.js","dummy/tests/test-helper.js","dummy/tests/test-helper.lint-test.js","dummy/tests/unit/services/busy-test.js","dummy/tests/unit/services/busy-test.lint-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["define('dummy/tests/acceptance/busy-test', ['exports', 'ember', 'qunit', 'dummy/tests/helpers/destroy-app', 'dummy/tests/helpers/module-for-acceptance', 'dummy/tests/helpers/start-app'], function (exports, _ember, _qunit, _dummyTestsHelpersDestroyApp, _dummyTestsHelpersModuleForAcceptance, _dummyTestsHelpersStartApp) {\n  var $ = _ember['default'].$;\n\n  var application = undefined;\n\n  (0, _dummyTestsHelpersModuleForAcceptance['default'])('Acceptance | busy', {\n    beforeEach: function beforeEach() {\n      application = (0, _dummyTestsHelpersStartApp['default'])();\n    },\n\n    afterEach: function afterEach() {\n      (0, _dummyTestsHelpersDestroyApp['default'])(application);\n    }\n  });\n\n  // General e2e test\n  (0, _qunit.test)('the component shows, hides and can take a custom message', function (assert) {\n    visit('/');\n\n    andThen(function () {\n      var busyElem = $('.busy-blocker');\n      var busyAnimElems = $('.busy-blocker__bg, .busy-blocker__content');\n\n      assert.equal(busyElem.css('display'), 'none', 'The component is hidden at start');\n\n      // Trigger show of busy blocker by clicking the hero button\n      click('.jumbotron button');\n\n      // Verify animation and message after shown\n      _ember['default'].run.later(function () {\n        assert.equal(busyElem.css('display'), 'block', 'The component is displayed');\n        assert.ok(busyAnimElems.hasClass('fade-in'), 'The animation elements have the \"fade-in\" class');\n        assert.equal(busyElem.find('.busy-blocker__message').text().trim(), '✋ Talk to the hand ✋', 'The message can be customized');\n      }, 500);\n\n      // Dummy app auto-hides busy blocker after 3 seconds\n      _ember['default'].run.later(function () {\n        assert.equal(busyElem.css('display'), 'none', 'The component is not displayed after hide');\n        assert.ok(busyAnimElems.hasClass('fade-out'), 'The animation elements have the \"fade-out\" class');\n      }, 4000);\n    });\n  });\n\n  // Test for Mixin actions\n  (0, _qunit.test)('the mixin works', function (assert) {\n    visit('/');\n\n    andThen(function () {\n      var busyElem = $('.busy-blocker');\n      var busyAnimElems = $('.busy-blocker__bg, .busy-blocker__content');\n\n      assert.equal(busyElem.css('display'), 'none', 'The component is hidden at start');\n\n      // Trigger show of busy blocker by clicking the button using the mixin action\n      click('.js-busy-mixin-btn');\n\n      // Verify animation after shown\n      _ember['default'].run.later(function () {\n        assert.equal(busyElem.css('display'), 'block', 'The component is displayed');\n        assert.ok(busyAnimElems.hasClass('fade-in'), 'The animation elements have the \"fade-in\" class');\n        assert.equal(busyElem.find('.busy-blocker__message').text().trim(), 'Loading...', 'The default message is shown');\n\n        // Trigger hide quickly via click of hidden button using the mixin action\n        click('.js-free-mixin-btn');\n      }, 500);\n\n      /**\n       * Verify hide shortly after show and trigger of hide. Need to wait for animation to\n       * complete(300ms by default) before checking.\n       */\n      _ember['default'].run.later(function () {\n        assert.equal(busyElem.css('display'), 'none', 'The component is not displayed after hide');\n        assert.ok(busyAnimElems.hasClass('fade-out'), 'The animation elements have the \"fade-out\" class');\n      }, 850);\n    });\n  });\n});","define('dummy/tests/acceptance/busy-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - acceptance/busy-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/busy-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/app.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - app.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/controllers/index.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - controllers/index.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/index.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('dummy/tests/helpers/destroy-app.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/destroy-app.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'dummy/tests/helpers/start-app', 'dummy/tests/helpers/destroy-app'], function (exports, _qunit, _dummyTestsHelpersStartApp, _dummyTestsHelpersDestroyApp) {\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _dummyTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        if (options.afterEach) {\n          options.afterEach.apply(this, arguments);\n        }\n\n        (0, _dummyTestsHelpersDestroyApp['default'])(this.application);\n      }\n    });\n  };\n});","define('dummy/tests/helpers/module-for-acceptance.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/module-for-acceptance.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/helpers/resolver', ['exports', 'dummy/resolver', 'dummy/config/environment'], function (exports, _dummyResolver, _dummyConfigEnvironment) {\n\n  var resolver = _dummyResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _dummyConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _dummyConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('dummy/tests/helpers/resolver.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/resolver.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/helpers/start-app', ['exports', 'ember', 'dummy/app', 'dummy/config/environment'], function (exports, _ember, _dummyApp, _dummyConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n    var attributes = _ember['default'].merge({}, _dummyConfigEnvironment['default'].APP);\n\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _dummyApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('dummy/tests/helpers/start-app.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/start-app.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/resolver.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - resolver.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/router.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - router.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/routes/application.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - routes/application.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/application.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/routes/index.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - routes/index.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/test-helper', ['exports', 'dummy/tests/helpers/resolver', 'ember-qunit'], function (exports, _dummyTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_dummyTestsHelpersResolver['default']);\n});","define('dummy/tests/test-helper.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - test-helper.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/unit/services/busy-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:busy', 'Unit | Service | busy', {\n    // Specify the other units that are required for this test.\n  });\n\n  (0, _emberQunit.test)('it triggers show and hide events', function (assert) {\n    var service = this.subject();\n\n    assert.expect(2);\n\n    service.on('hide', this, function onHide() {\n      assert.ok(true, 'call to service.hide() triggers \"hide\" event');\n    });\n\n    service.on('show', this, function onShow() {\n      assert.ok(true, 'call to service.show() triggers \"show\" event');\n    });\n\n    service.hide();\n    service.show();\n  });\n\n  (0, _emberQunit.test)('it accepts and passes along options for show()', function (assert) {\n    var MESSAGE = 'We busy yo';\n    var service = this.subject();\n\n    assert.expect(2);\n\n    service.on('show', this, function onShow(options) {\n      assert.ok(options, 'call to service.show() passed along options');\n      assert.equal(options.message, MESSAGE, 'passed message was received in options');\n    });\n\n    service.show({ message: MESSAGE });\n  });\n});","define('dummy/tests/unit/services/busy-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/services/busy-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/busy-test.js should pass ESLint.\\n');\n  });\n});","/* jshint ignore:start */\n\nrequire('dummy/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}